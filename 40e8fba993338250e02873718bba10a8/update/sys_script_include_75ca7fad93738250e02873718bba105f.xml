<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_multipart.StreamExt</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_376096_multipart.StreamExt</description>
        <name>StreamExt</name>
        <script><![CDATA[/* global x_376096_multipart */
/* global Class, GlideRecord, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var StreamExt = Class.create();
StreamExt.prototype = {
	initialize: function () {
		const scriptGr = new GlideRecord('clone_cleanup_script');
		scriptGr.addQuery('sys_scope', 'global');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			this.scriptGr = scriptGr;
		} else {
			throw new Error(`${this.type} requires injectable script record`);
		}
	},

	/**
	 * @param {GlideSysAttachmentInputStream|GlideScriptableInputStream} istream
	 * @param {number} bufferSize
	 * @return {InputStream}
	 */
	bufferedStream: function (istream, bufferSize) {
		this.scriptGr.script = `
			(function (istream) {
				var is = new x_376096_multipart.InputStream();
				var stream = new Packages.java.io.BufferedInputStream(istream, bufferSize);
				is.read = function () {
					return stream.read();
				}

				// Note: all other read functions are blocked
				return is;
			})(istream);`;

		const gse = new GlideScopedEvaluator();
		gse.putVariable('istream', istream);
		return gse.evaluateScript(this.scriptGr, 'script', {
			bufferSize: bufferSize
		});
	},

	/**
	 * @param {GlideSysAttachmentInputStream|GlideScriptableInputStream} istream
	 * @return {Array.<number>} bytes
	 */
	streamToBytes: function (istream) {
		this.scriptGr.script = `
			(function (istream) {
				var baos = new Packages.java.io.ByteArrayOutputStream();
				var istreamClass = String(istream);
				if (istreamClass.indexOf('SysAttachmentInputStream') != -1) {
					istream.writeTo(baos);
				} else if (istreamClass.indexOf('GlideScriptableInputStream') != -1) {
					var dummyGr = new GlideRecord('sc_cart_item');
					dummyGr.newRecord();
					var gsa = new GlideSysAttachment();
					var attSysID = gsa.writeContentStream(dummyGr, 'temp', 'application/octet-stream', istream);
					new GlideSysAttachmentInputStream(attSysID).writeTo(baos);
					gsa.deleteAttachment(attSysID);
				} else {
					new GlideSysAttachmentInputStream(istream).writeTo(baos);
				}

				// need to convert the Java ByteArray to a JavaScript array, other wise a glide fencing error
				// will be thrown when this function used by a scoped app
				var javaBytes = baos.toByteArray();
				var jsBytes = new Array(javaBytes.length);
				for (var i = 0; i < jsBytes.length; i++) {
					var theByte = javaBytes[i];
					jsBytes[i] = theByte < 0 ? theByte + 256 : theByte;
				}

				return jsBytes;
			})(istream);
		`;

		const gse = new GlideScopedEvaluator();
		gse.putVariable('istream', istream);
		return gse.evaluateScript(this.scriptGr, 'script');
	},

	/**
	 * @param {GlideRecordGenerated} appendGr - record to which to attach the attachment
	 * @param {string} fileName
	 * @param {string} contentType
	 * @param {ArrayLike} bytes
	 * @return {string} the attachment's SysID
	 */
	saveBytesAsAttachment: function (appendGr, fileName, contentType, bytes) {
		this.scriptGr.script = `
			(function () {
				var byteArray = Packages.java.lang.reflect.Array.newInstance(Packages.java.lang.Byte.TYPE, bytes.length);
				for (var i = 0; i < bytes.length; i++) {
					var theByte = bytes[i];
					// unfortunately the byte conversion is not done automatically for us (byte is unsigned!)
					// (and I haven't found a way to use native Java methods that work with rhino/NOW)
					byteArray[i] = (theByte < 128) ? theByte : (theByte - 256);
				}

				// the global GlideSysAttachment.write method has a hidden compatibility for byte[] arguments
				return new GlideSysAttachment().write(appendGr, fileName,  contentType, byteArray);
			})();
		`;

		const gse = new GlideScopedEvaluator();
		gse.putVariable('appendGr', appendGr);
		gse.putVariable('bytes', bytes);
		return gse.evaluateScript(this.scriptGr, 'script', {
			fileName: fileName,
			contentType: contentType
		});
	},

	type: 'StreamExt'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-04 00:29:41</sys_created_on>
        <sys_id>75ca7fad93738250e02873718bba105f</sys_id>
        <sys_mod_count>107</sys_mod_count>
        <sys_name>StreamExt</sys_name>
        <sys_package display_value="Multipart" source="x_376096_multipart">40e8fba993338250e02873718bba10a8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Multipart">40e8fba993338250e02873718bba10a8</sys_scope>
        <sys_update_name>sys_script_include_75ca7fad93738250e02873718bba105f</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-09-06 17:19:34</sys_updated_on>
    </sys_script_include>
</record_update>
