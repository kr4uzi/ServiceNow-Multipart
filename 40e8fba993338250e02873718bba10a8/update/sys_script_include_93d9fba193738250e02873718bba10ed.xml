<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_multipart.ByteArrayOutputStream</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ByteArrayOutputStream</name>
        <script><![CDATA[/* global gs, x_376096_multipart */
/* global Class, ArrayBuffer, Uint8Array, GlideRecord, GlideSysAttachment */
/* eslint no-undef: "error" */
var ByteArrayOutputStream = Class.create();
ByteArrayOutputStream.prototype = Object.extendsObject(x_376096_multipart.OutputStream, {
	initialize: function(length) {
		x_376096_multipart.OutputStream.prototype.initialize.call(this);

		// ArrayBuffer resize is ES2023
		// this._buffer = new ArrayBuffer(length || 32, {
		// 	maxByteLength: +gs.getProperty('x_376096_multipart.file.max_size')
		// });
		// this._bytes = new Uint8Array(this._buffer);
		// this._count = 0;
		this._bytes = [];
	},

	reset: function () {
		// this._count = 0;
	},

	writeTo: function (os) {
		os.writeBytes(this._bytes);
		// os.write(this._bytes, 0, this._bytes.length);
	},

	writeByte: function(b) {
		this.writeBytes([b]);
	},

	writeBytes: function (bytes) {
		// const requiredLength = this._count + bytes.length;
		// if (this._bytes.length < requiredLength) {
		// 	this._buffer.resize(requiredLength);
		// }

		// this._bytes.set(bytes, this._count);
		// this._count += bytes.length;
		this._bytes.push(...bytes);
	},

	unread: function (b) {
		this.bytes.unshift(b);
	},

	unreadBytes: function (bytes) {
		this.bytes.unshift(...bytes);
	},

	toByteArray: function() {
		// return this._bytes.slice(0, this._count);
		return new Uint8Array(this._bytes);
	},

	toString: function() {
		return String.fromCharCode(...this.toByteArray());
	},

	toStringBase64: function() {
		return base64ArrayBuffer(this.toByteArray());

		// https://gist.github.com/jonleighton/958841
		function base64ArrayBuffer(arrayBuffer) {
			var base64    = '';
			var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

			var bytes         = new Uint8Array(arrayBuffer);
			var byteLength    = bytes.byteLength;
			var byteRemainder = byteLength % 3;
			var mainLength    = byteLength - byteRemainder;

			var a, b, c, d;
			var chunk;

			// Main loop deals with bytes in chunks of 3
			for (var i = 0; i < mainLength; i = i + 3) {
				// Combine the three bytes into a single integer
				chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];

				// Use bitmasks to extract 6-bit segments from the triplet
				a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
				b = (chunk & 258048)   >> 12; // 258048   = (2^6 - 1) << 12
				c = (chunk & 4032)     >>  6; // 4032     = (2^6 - 1) << 6
				d = chunk & 63;               // 63       = 2^6 - 1

				// Convert the raw binary segments to the appropriate ASCII encoding
				base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
			}

			// Deal with the remaining bytes and padding
			if (byteRemainder == 1) {
				chunk = bytes[mainLength];

				a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2

				// Set the 4 least significant bits to zero
				b = (chunk & 3)   << 4; // 3   = 2^2 - 1

				base64 += encodings[a] + encodings[b] + '==';
			} else if (byteRemainder == 2) {
				chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];

				a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
				b = (chunk & 1008)  >>  4; // 1008  = (2^6 - 1) << 4

				// Set the 2 least significant bits to zero
				c = (chunk & 15)    <<  2; // 15    = 2^4 - 1

				base64 += encodings[a] + encodings[b] + encodings[c] + '=';
			}
			
			return base64;
		}
	},

	type: 'ByteArrayOutputStream'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-04 00:25:55</sys_created_on>
        <sys_id>93d9fba193738250e02873718bba10ed</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>ByteArrayOutputStream</sys_name>
        <sys_package display_value="Multipart" source="x_376096_multipart">40e8fba993338250e02873718bba10a8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Multipart">40e8fba993338250e02873718bba10a8</sys_scope>
        <sys_update_name>sys_script_include_93d9fba193738250e02873718bba10ed</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-09-06 17:05:19</sys_updated_on>
    </sys_script_include>
</record_update>
