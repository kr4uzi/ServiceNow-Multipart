<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_multipart.AttachmentOutputStream</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AttachmentOutputStream</name>
        <script><![CDATA[/* global Class, GlideRecord, GlideSysAttachment, GlideScriptedExtensionPoint */
/* global gs, x_376096_multipart */
/* eslint no-undef: "error" */
var AttachmentOutputStream = Class.create();
AttachmentOutputStream.prototype = Object.extendsObject(x_376096_multipart.OutputStream, {
	/**
	 * @param {string} fileName
	 * @param {string} contentType - the (MIME) content type of the attachment 
	 */
	initialize: function(fileName, contentType) {
		//this._bytes = new ByteArrayOutputStream();
		this._bytes = [];
		this._fileName = fileName;
		this._contentType = contentType;
		this._gsa = new GlideSysAttachment();

		const eps = new GlideScriptedExtensionPoint().getExtensions('StreamExt');
		if (eps.length) {
			eps[0].initialize();
			this._eps = eps[0];
		} else {
			throw new Error('StreamExt implementation required');
		}
	},

	flush: function() {
		if (this._attSysID) {
			this._gsa.deleteAttachment(this._attSysID);
			delete this._attSysID;
		}

		const fakeGr = new GlideRecord('sc_cart_item');
		fakeGr.setNewGuidValue(gs.generateGUID());
		//this._attSysID = this._gsa.writeBase64(fakeGr, this._fileName, this._contentType, this._bytes.toStringBase64());
		this._attSysID = this._eps.saveBytesAsAttachment(fakeGr, this._fileName, this._contentType, this._bytes);
		if (!this._attSysID) {
			throw new Error('Failed to write to attachment');
		}
	},

	attachmentSysID: function() {
		return this._attSysID;
	},

	fileName: function() {
		return this._fileName;
	},

	contentType: function() {
		return this._contentType;
	},

	writeByte: function(b) {
		this._bytes.push(b);
		//this._bytes.writeByte(b);
	},

	type: 'AttachmentOutputStream'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-04 00:27:00</sys_created_on>
        <sys_id>871a3fe193738250e02873718bba100c</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>AttachmentOutputStream</sys_name>
        <sys_package display_value="Multipart" source="x_376096_multipart">40e8fba993338250e02873718bba10a8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Multipart">40e8fba993338250e02873718bba10a8</sys_scope>
        <sys_update_name>sys_script_include_871a3fe193738250e02873718bba100c</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-08-04 02:15:05</sys_updated_on>
    </sys_script_include>
</record_update>
