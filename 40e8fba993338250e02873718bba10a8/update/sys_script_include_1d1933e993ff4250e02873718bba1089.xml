<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_multipart.OutputStream</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>OutputStream</name>
        <script><![CDATA[/* global Class, GlideRecord, gs, GlideSysAttachment, Uint8Array */
/* eslint no-undef: "error" */
var OutputStream = Class.create();
OutputStream.prototype = {
	initialize: function () {

	},

	/**
	 * Closes this output stream and releases any system resources associated with this stream.
	 */
	close: function () {

	},

	/**
	 * Flushes this output stream and forces any buffered output bytes to be written out.
	 */
	flush: function () {

	},

	/**
	 * @overload
	 * Writes the specified byte to this output stream.
	 * @param {number} b
	 */
	/**
	 * @overload
	 * Writes b.length bytes from the specified byte array to this output stream.
	 * @param {ArrayLike.<number>} b
	 * @return {void}
	 */
	/**
	 * Writes len bytes from the specified byte array starting at offset off to this output stream.
	 * @param {ArrayLike.<number>} b
	 * @param {number} off
	 * @param {number} len
	 */
	write: function (b, off, len) {
		if (arguments.length == 1) {
			if (typeof b == 'number') {
				this.writeByte(b);
			} else {
				this.writeBytes(b);
			}
		} else if (arguments.length == 3) {
			this.writeBytes(new Uint8Array(b, off, len));
		} else {
			throw new Error('Invalid arguments');
		}
	},

	/**
	 * Writes the specified byte to this output stream.
	 * @param {number} b - the byte.
	 */
	writeByte: function (b) {
		throw new Error('implementation required by child class');
	},

	/**
	 * Writes b.length bytes from the specified byte array to this output stream.
	 * @param {ArrayLike.<number>} b - the data.
	 */
	writeBytes: function (b) {
		for (let i = 0; i < b.length; i++) {
			this.writeByte(b[i]);
		}
	},

	type: 'OutputStream'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-04 00:22:49</sys_created_on>
        <sys_id>1d1933e993ff4250e02873718bba1089</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>OutputStream</sys_name>
        <sys_package display_value="Multipart" source="x_376096_multipart">40e8fba993338250e02873718bba10a8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Multipart">40e8fba993338250e02873718bba10a8</sys_scope>
        <sys_update_name>sys_script_include_1d1933e993ff4250e02873718bba1089</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-09-06 17:10:41</sys_updated_on>
    </sys_script_include>
</record_update>
