<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_multipart.Multipart</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Multipart</name>
        <script><![CDATA[/* global x_376096_multipart */
/* global Class, GlideSysAttachment */
/* eslint no-undef: "error" */
var Multipart = Class.create();
Multipart.prototype = {
	initialize: function () {
		this.httpParser = new x_376096_multipart.HTTPParser();
		this.supportedSubtypes = [
			//'alternative', // RFC1521
			//'byteranges', // RFC2068
			//'digest', // RFC1521
			'form-data', // RFC1867
			//'mixed', // RFC1521
			//'parallel', // RFC1521
			//'related', RFC2112
		];

		this.headerSeparator = Array.from('\r\n\r\n').map(c => c.charCodeAt(0));
	},

	/**
	 * @param {{contentType: string, contentSize: number, fileOput: ('base64'|'attachment'|'binary'|'none'), stream: GlideScriptableInputStream}}
	 * @return {Array.<{ key: string, value: string|{ sys_id: string, content: string|Uint8Array, contentType: string, fileName: string } }>}
	 */
	parse: function ({ contentType, contentSize, fileOutput, stream }) {
		const ostreams = [];

		try {
			if (!contentType || !fileOutput || !stream) {
				throw new Error('parse expectes a { contentType: string, fileOutput: (none, base64, attachment, binary), stream: (GlideSysAttachmentInputStream|GlideScriptableInputStream) } parameter');
			}

			return this._parse(ostreams, contentType, contentSize, fileOutput, stream);
		} catch (e) {
			// if we cannot successfully return potentially attachments, we need to make sure those are cleaned up
			ostreams.forEach(ostream => {
				try { ostream.close(); } catch (e) {}
			});

			throw e;
		}
	},

	_parseMultiPartElement: function (stream, contentType, subType, boundary, fileOutputMode) {
		const osHeader = new x_376096_multipart.ByteArrayOutputStream();
		if (!this._seekPBStream(stream, this.headerSeparator, 128, osHeader, 256)) {
			throw new Error('Unexpected EOF (header)');
		}

		const headers = this.httpParser.parse(osHeader.toString());
		let fileName = '';
		let partKey = '';
		if ('content-disposition' in headers) {
			const contentDisposition = this.httpParser.parseContentDisposition(headers['content-disposition']);
			if ('filename' in contentDisposition.parameters) {
				fileName = contentDisposition.parameters.filename.trim();
				if (!fileName) {
					throw new Error('filename must not be empty if set');
				}
			}

			if (subType == 'form-data') {
				if (contentDisposition.type != 'form-data') {
					throw new Error('Each part MUST contain a Content-Disposition where the disposition type is "form-data"');
				}
				
				if ('name' in contentDisposition.parameters) {
					partKey = contentDisposition.parameters.name.trim();
				}

				if (!partKey) {
					throw new Error('The Content-Disposition header field MUST also contain an additional parameter of "name"');
				}
			}
		} else if (subType == 'form-data') {
			throw new Error('content-disposition is mandatory for form-data');
		}

		const partContentType = subType == 'form-data' ?
			'content-type' in headers ?
				this.httpParser.parseContentType(headers['content-type']) :
				this.httpParser.parseContentType('text/plain') :
			undefined;

		// find a matching output stream for the content type (e.g. blob for attachments, bytearray for text, ...)
		const osBody = this._getOutputStreamForContent(fileName, contentType, partContentType, fileOutputMode);
		if (!this._seekPBStream(stream, boundary, 1024, osBody, 1024)) {
			osBody.close();
			throw new Error('Unexpected EOF (no boundary)');
		}

		const end = String.fromCharCode(...stream.readNBytes(2));
		if (end == '--') {
			// everything left after this point should be ignored
			return {
				done: true,
				part: {
					key: partKey,
					value: this._getStreamOutput(osBody)
				}
			};
		} else if (end == '\r\n') {
			return {
				done: false,
				part: {
					key: partKey,
					value: this._getStreamOutput(osBody)
				}
			};
		}

		throw new Error('unexpected EOF (form-data not separated by \\r\\n)');
	},

	/**
	 * @param {Array.<x_376096_multipart.OutputStream>} ostreams - the container of output streams for error cleanup
	 * @param {string} contentType
	 * @param {number=} contentSize
	 * @param {'base64'|'attachment'|'binary'|'none'} fileOutput - how file multiparts shall be returned
	 * @param {GlideScriptableInputStream} stream
	 * @return {Array.<{ key: string, value: string|{ sys_id: string, content: string|Uint8Array, contentType: string, fileName: string } }>}
	 */
	_parse: function (ostreams, contentType, contentSize, fileOutput, stream) {
		contentType = this.httpParser.parseContentType(contentType);
		stream = stream.type ? stream : new x_376096_multipart.NOWInputStream(stream);
		if (stream.type != 'PushbackInputStream') {
			stream = new x_376096_multipart.PushbackInputStream(stream);
		}

		const [type, subType] = contentType.type.split('/');
		if (type != 'multipart') {
			const ostream = this._getOutputStreamForContent('', { type: '' }, contentType, fileOutput);
			ostreams.push(ostream);
			return this._getStreamOutput(ostream);
		}

		if (!this.supportedSubtypes.includes(subType)) {
			throw new Error('Unsupported multipart subtype');
		}
		
		// trailing spaces are allowed, but must be ignored
		const boundaryStr = contentType.parameters.boundary?.trimEnd();
		if (!boundaryStr) {
			throw new Error('the boundary parameter is mandatory for multipart');
		} else if (boundaryStr.length > 70) {
			throw new Error('the boundary parameter must not be longer than 70 characters');
		}

		// proceed to the first boundary (anything before that may be ignored)
		if (!this._seekPBStream(stream, Array.from('--' + boundaryStr + '\r\n').map(c => c.charCodeAt(0)), 128)) {
			throw new Error('Unexpected EOF (no initial boundary)');
		}

		const parts = [];
		// after the first boundary, the CRLF proceeding the boundary is not part of the data!
		// the boundary is then followed by either CRLF (indicating a new part) or -- (indicating EOF)
		const boundary = Array.from('\r\n--' + boundaryStr).map(c => c.charCodeAt(0));
		let done = false;
		while (!done) {
			try {
				const res = this._parseMultiPartElement(stream, contentType, subType, boundary, fileOutput);
				parts.push(res.part);
				done = res.done;
			} catch (e) {
				if (fileOutput == 'attachment') {
					const gsa = new GlideSysAttachment();
					parts.forEach(p => {
						if (p.value.sys_id) {
							gsa.deleteAttachment(p.value.sys_id);
						}
					});
				}

				throw e;
			}
		}

		return parts;
	},

	/**
	 * @param {x_376096_multipart.PushbackInputStream} istream
	 * @param {Array.<number>} arr
	 * @param {number} searchWindow
	 * @return {Array.<number>}
	 * @boolean
	 */
	_seekPBStream: function (istream, arr, searchWindow, ostream, writeWindow) {
		writeWindow = writeWindow || searchWindow;
		ostream = ostream || { writeAllBytes: function () {} };

		const bytes = [];
		let pos = -1;
		let searchStart = 0;
		while ((pos = this._findArray(bytes, arr, searchStart)) == -1) {
			if (bytes.length > writeWindow) {
				ostream.writeAllBytes(bytes.splice(0, Math.max(bytes.length - arr.length, 0)));
			}

			searchStart = Math.max(0, bytes.length - arr.length);
			const block = istream.readNBytes(searchWindow);
			if (block.length == 0) {
				break;
			}

			bytes.push(...block);
		}

		if (pos == -1) {
			ostream.writeAllBytes(bytes);
			return false;
		}

		// move the rest up to the arr-index into the output stream ...
		ostream.writeAllBytes(bytes.splice(0, pos));

		// ... but discard the arr itself
		bytes.splice(0, arr.length);

		istream.unreadBytes(bytes);
		return true;
	},

	_getStreamOutput: function (ostream) {
		ostream.flush();

		if (ostream.type == 'ByteArrayOutputStream') {				
			return ostream.toString();
		} else if (ostream.type == 'AttachmentOutputStream') {
			return {
				sys_id: ostream.attachmentSysID(),
				fileName: ostream.fileName(),
				contentType: ostream.contentType()
			};
		} else if (ostream.type == 'BlobOutputStream') {
			return {
				content: ostream.MultiPartResultMode == 'binary' ? ostream.toByteArray()
					: ostream.MultiPartResultMode == 'none' ? undefined
					: ostream.toBase64(),
				fileName: ostream.fileName(),
				contentType: ostream.contentType()
			};
		} else if (ostream.type == 'NestedMultipartOutputStream') {
			return ostream.data();
		} else {
			throw new Error('Unknown OutputStream type');
		}
	},

	_getOutputStreamForContent: function (fileName, parentContentType, childContentType, fileOutput) {
		if (fileName) {
			if (fileOutput == 'base64') {
				return new x_376096_multipart.BlobOutputStream(fileName, childContentType.type);
			} else if (fileOutput == 'attachment') {
				return new x_376096_multipart.AttachmentOutputStream(fileName, childContentType.type);
			} else if (fileOutput == 'binary') {
				const ostream = new x_376096_multipart.BlobOutputStream(fileName, childContentType.type);
				ostream.MultiPartResultMode = 'binary';
				return ostream;
			} else if (fileOutput == 'none') {
				const ostream = new x_376096_multipart.BlobOutputStream(fileName, childContentType.type);
				ostream.MultiPartResultMode = 'none';
				ostream.writeByte = function () {};
				return ostream;
			} else {
				throw new Error('Invalid fileOutput');
			}
		}

		const [parentType, parentSubType] = parentContentType.type.split('/');
		const [childType, childSubType] = childContentType.type.split('/');
		if (childType == 'multipart' && (parentType == 'multipart' || (parentSubType != childSubType))) {
			return x_376096_multipart.NestedMultipartOutputStream(this, {
				fileOutput: fileOutput,
				contentType: childContentType
				// stream will be set by NestedMultipartStream 
			});
		}
		
		return new x_376096_multipart.ByteArrayOutputStream();
	},

	_findArray: function (master, sub, masterStart) {
		if (sub.length > master.length) {
			return -1;
		}
		
		const searchEnd = master.length - sub.length;
		let i = masterStart || 0;
		while (i <= searchEnd && (i = master.indexOf(sub[0], i)) != -1) {
			let j = 0;
			for (; j < sub.length; j++) {
				if (master[i + j] != sub[j]) {
					break;
				}
			}

			if (j == sub.length) {
				return i;
			}

			i++;
		}

		return -1;
	},

	type: 'Multipart'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-04 01:20:34</sys_created_on>
        <sys_id>c265c47193f38250e02873718bba107c</sys_id>
        <sys_mod_count>86</sys_mod_count>
        <sys_name>Multipart</sys_name>
        <sys_package display_value="Multipart" source="x_376096_multipart">40e8fba993338250e02873718bba10a8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Multipart">40e8fba993338250e02873718bba10a8</sys_scope>
        <sys_update_name>sys_script_include_c265c47193f38250e02873718bba107c</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-09-02 19:26:11</sys_updated_on>
    </sys_script_include>
</record_update>
