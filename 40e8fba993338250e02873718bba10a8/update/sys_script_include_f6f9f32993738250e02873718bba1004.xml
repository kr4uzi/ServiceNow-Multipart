<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_multipart.ByteArrayInputStream</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ByteArrayInputStream</name>
        <script><![CDATA[/* global Class, GlideScriptedExtensionPoint */
/* global gs, x_376096_multipart */
/* eslint no-undef: "error" */
var ByteArrayInputStream = Class.create();
ByteArrayInputStream.fromAttachment = function (attachmentSysID) {
	const eps = new GlideScriptedExtensionPoint().getExtensions('StreamExt');
	if (eps.length) {
		eps[0].initialize();
		return new x_376096_multipart.ByteArrayInputStream(eps[0].streamToBytes(attachmentSysID));
	} else {
		throw new Error('StreamExt implementation required');
	}
};
ByteArrayInputStream.prototype = Object.extendsObject(x_376096_multipart.InputStream, {
	/**
	 * @param {ArrayLike} buff
	 * @param {number=} offset
	 * @param {number=} length
	 */
	initialize: function(buff, offset, length) {
		x_376096_multipart.InputStream.prototype.initialize.call(this);

		this._buff = buff;
		if (arguments.length == 3) {
			this._pos = this._offset = offset;
			this._count = Math.min(length, buff.length - offset);
		} else {
			this._pos = this._offset = 0;
			this._count = buff.length;
		}
	},

	/**
	 * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking, which may be 0, or 0 when end of stream is detected.
	 * @return {number} an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking or 0 when it reaches the end of the input stream.
	 */
	available: function() {
		return this._count - this._pos;
	},

	/**
	 * Reads the next byte of data from the input stream.
	 * @return {number} the next byte of data, or -1 if the end of the stream is reached.
	 */
	read: function() {
		const bytes = this.readNBytes(1);
		return bytes.length ? bytes[0] : -1;
	},

	/**
	 * Reads all remaining bytes from the input stream.
	 * @return {ArrayViewLike} a byte array containing the bytes read from this input stream
	 */
	readAllBytes: function() {
		return this.readNBytes(this.available());
	},

	/**
	 * Reads up to a specified number of bytes from the input stream.
	 * @param {number} len - the maximum number of bytes to read
	 * @return {ArrayViewLike} a byte array containing the bytes read from this input stream
	 */
	readNBytes: function(len) {
		const bytes = this._buff.slice(this._pos, this._pos + Math.min(this.available(), len));
		this._pos += bytes.length;
		return bytes;
	},

	/**
	 * Repositions this stream to the position at the time the mark method was last called on this input stream.
	 */
	reset: function() {
		this._pos = this._offset;
	},

	/**
	 * Skips over and discards n bytes of data from this input stream.
	 * @param {number} n - the number of bytes to be skipped.
	 * @return {number} the actual number of bytes skipped
	 */
	skip: function(n) {
		const skippable = Math.min(n, this.available());
		this._pos += skippable;
		return skippable;
	},

	type: 'ByteArrayInputStream'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-04 00:26:28</sys_created_on>
        <sys_id>f6f9f32993738250e02873718bba1004</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>ByteArrayInputStream</sys_name>
        <sys_package display_value="Multipart" source="x_376096_multipart">40e8fba993338250e02873718bba10a8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Multipart">40e8fba993338250e02873718bba10a8</sys_scope>
        <sys_update_name>sys_script_include_f6f9f32993738250e02873718bba1004</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-09-06 14:04:58</sys_updated_on>
    </sys_script_include>
</record_update>
